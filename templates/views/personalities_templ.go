// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.778
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "github.com/google/uuid"

type Personality struct {
	ID uuid.UUID

	Name      string
	Biography string
	Keywords  string
	Thematics string
	TextStyle string
}

func NewPersonalities(personalities []*Personality) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<!doctype html><html lang=\"ru\"><head><meta charset=\"UTF-8\"><title>Панель управления</title><link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css\"><script>\n            const namesSrc = {\n               \"create\": {\n                  \"method\": \"POST\",\n                  \"title\": \"Создать новую личность\",\n                  \"header\": \"Заполните нужную информацию для создания новой личности\",\n                  \"button\": \"Создать\",\n                  \"error\": \"Не получилось создать новую личность\"\n               },\n               \"edit\": {\n                  \"method\": \"PUT\",\n                  \"title\": \"Редактирование личности\",\n                  \"header\": \"Измените нужную информацию\",\n                  \"button\": \"Сохранить\",\n                  \"error\": \"Не получилось отредактировать личность\"\n               }\n            }\n\n            function validateForm(formData) {\n               for (let [key, val] of formData.entries()) {\n                  if (val === \"\") {\n                     alert(`Поле '${key}' не должно быть пустым`)\n                     return false\n                  }\n               }\n\n               return true\n            }\n\n            function createDialog(param, id = \"\", name = \"\", biography = \"\", keywords = \"\", thematics = \"\", textStyle = \"\") {\n               const names = namesSrc[param]\n\n               const dialogHTML = `\n                        <article>\n                           <header>\n                              <button aria-label=\"close\" rel=\"prev\" id=\"close-dialog\"></button>\n                              <p>\n                                 <strong>${names[\"title\"]}</strong>\n                              </p>\n                           </header>\n                           <p>\n                              <u>${names[\"header\"]}</u>\n                           </p>\n                           <form id=\"create-form\">\n                              <label>\n                              Имя\n                              <input type=\"text\" name=\"name\" placeholder=\"Александр Пушкин\" value=\"${name}\">\n                              </label>\n                              <label>\n                              Биография\n                              <textarea name=\"biography\" placeholder=\"Великий русский поэт, прозаик, драматург, один из самых авторитетных литературных деятелей первой трети XIX века.\">${biography}</textarea>\n                              </label>\n                              <label>\n                              Ключевые слова\n                              <input type=\"text\" name=\"keywords\" placeholder=\"поэзия литература романтизм\" value=\"${keywords}\">\n                              </label>\n                              <label>\n                              Тематика\n                              <input type=\"text\" name=\"thematics\" placeholder=\"Поэзия\" value=\"${thematics}\">\n                              </label>\n                              <label>\n                              Стиль речи\n                              <input type=\"text\" name=\"text_style\" placeholder=\"Официальный\" value=\"${textStyle}\">\n                              </label>\n                           </form>\n                           <footer>\n                              <button id=\"dialog-btn\">${names[\"button\"]}</button>\n                           </footer>\n                        </article>\n                             `\n\n               const dialog = document.createElement('dialog');\n               dialog.open = true;\n               dialog.innerHTML = dialogHTML;\n\n               dialog.querySelector(\"#close-dialog\").onclick = function() {\n                  dialog.parentNode.removeChild(dialog);\n               }\n\n               const form = dialog.querySelector(\"form\")\n\n               dialog.querySelector(\"#dialog-btn\").addEventListener(\"click\", function(event) {\n                  event.preventDefault()\n\n                  const formData = new FormData(form);\n\n                  if (!validateForm(formData)) {\n                     return\n                  }\n\n                  let obj = Object.fromEntries(formData)\n                  if (id !== \"\") {\n                     obj[\"id\"] = id\n                  }\n\n                  const json = JSON.stringify(obj);\n\n                  fetch('/api/personality', {\n                     method: names[\"method\"],\n                     headers: {\n                        'Content-Type': 'application/json'\n                     },\n                     body: json\n                  }).then(response => {\n                     if (response.status !== 201 && response.status !== 202) {\n                        response.text().then(function(text) {\n                           alert(`${names[\"error\"]}: ${text}`)\n                        })\n                        return\n                     }\n\n                     location.reload();\n\n                  }).catch(err => alert(`Не получилось отправить запрос на сервер ${err}`))\n               })\n\n               document.body.appendChild(dialog)\n            }\n\n            window.onload = function() {\n               document.querySelector(\"#create-personality\").onclick = function() {\n                  createDialog(\"create\")\n               }\n\n               document.querySelectorAll(\".personality\").forEach(el => {\n                  const id = el.getAttribute(\"data-uuid\")\n\n                  const name = el.querySelector(\"h5\").textContent\n                  const bio = el.getAttribute(\"data-bio\")\n                  const keywords = el.getAttribute(\"data-keywords\")\n                  const thematics = el.getAttribute(\"data-thematics\")\n                  const textStyle = el.getAttribute(\"data-text-style\")\n\n                  el.querySelector(\"button.edit\").addEventListener(\"click\", function() {\n                     createDialog(\"edit\", id, name, bio, keywords, thematics, textStyle)\n                  })\n\n                  el.querySelector(\"button.delete\").addEventListener(\"click\", function() {\n                     fetch('/api/personality', {\n                        method: 'DELETE',\n                        headers: {\n                           'Content-Type': 'text/plain'\n                        },\n                        body: id\n                     }).then(response => {\n                        if (response.status !== 200) {\n                           response.text().then(function(text) {\n                              alert(`Не получилось удалить личность: ${text}`)\n                           })\n                           return\n                        }\n\n                        location.reload();\n\n                     }).catch(err => alert(`Не получилось отправить запрос на сервер ${err}`))\n                  })\n               })\n            };\n          </script></head><body class=\"container\"><br><nav><ul><li><h1>Добро пожаловать в AI-feed!</h1></li></ul><ul><li><a href=\"/articles\">Статьи</a></li><li><a href=\"/themes\">Темы</a></li><li><a href=\"/personalities\">Личности</a></li></ul></nav><br><div><button class=\"container\" id=\"create-personality\">Создать новую личность</button><br><br><div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, personality := range personalities {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<article class=\"personality\" data-uuid=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var2 string
			templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(personality.ID.String())
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/views/personalities.templ`, Line: 205, Col: 79}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" data-bio=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(personality.Biography)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/views/personalities.templ`, Line: 205, Col: 112}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" data-keywords=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var4 string
			templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(personality.Keywords)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/views/personalities.templ`, Line: 205, Col: 149}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" data-thematics=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var5 string
			templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(personality.Thematics)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/views/personalities.templ`, Line: 205, Col: 188}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" data-text-style=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var6 string
			templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(personality.TextStyle)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/views/personalities.templ`, Line: 205, Col: 228}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"><div class=\"grid\"><h5>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var7 string
			templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(personality.Name)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/views/personalities.templ`, Line: 207, Col: 43}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</h5><div class=\"grid\"><button class=\"outline edit\">Редактировать</button> <button class=\"outline secondary delete\">Удалить</button></div></div></article>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div></div></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
