// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.778
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func NewAuth() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<!doctype html><html lang=\"ru\"><head><meta charset=\"UTF-8\"><title>Вход</title><link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css\"></head><script>\n            function validateForm(formData) {\n                for (let [key, val] of formData.entries()) {\n                   if (val === \"\") {\n                      alert(`Поле '${key}' не должно быть пустым`)\n                      return false\n                   }\n                }\n\n                return true\n            }\n\n            window.onload = () => {\n                document.querySelector(\"#auth-button\").onclick = function(event) {\n                   event.preventDefault()\n\n                   const form = document.querySelector(\"form\")\n                   const formData = new FormData(form);\n\n                   if (!validateForm(formData)) {\n                      return\n                   }\n\n                   let obj = Object.fromEntries(formData)\n\n                   const json = JSON.stringify(obj);\n\n                   console.log(json)\n\n                   fetch('/api/auth', {\n                      method: \"post\",\n                      headers: {\n                         'Content-Type': 'application/json'\n                      },\n                      body: json\n                   }).then(response => {\n                     response.json().then(function(result) {\n                        if (result[\"status\"] === \"error\") {\n                            alert(result[\"msg\"])\n                            return\n                        }\n\n                        if (result[\"status\"] !== \"ok\") {\n                            alert(\"Получили неизвестный статус\")\n                            return\n                        }\n\n                        document.cookie = `token=${result[\"token\"]}`\n                        window.location.href=\"/articles\"\n                     })\n\n                   }).catch(err => alert(`Не получилось отправить запрос на сервер ${err}`))\n                }\n            }\n        </script><body class=\"container\"><br><h1>Авторизация в системе AI-Feed</h1><form><input type=\"text\" name=\"login\" placeholder=\"Логин\" aria-label=\"login\"> <input type=\"password\" name=\"password\" placeholder=\"Пароль\" aria-label=\"password\"><br><br><button id=\"auth-button\">Вход / Регистрация</button></form></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
